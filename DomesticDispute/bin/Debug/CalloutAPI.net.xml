<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CalloutAPI.net</name>
    </assembly>
    <members>
        <member name="F:CalloutAPI.Callout.AssignedPlayers">
            <summary>
            The list of players that has accepted the callout
            NOTE: The base player is always going to be added by default
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.CalloutDescription">
            <summary>
            The description of the callout that will be displayed in the computer (Detailed)
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.ShortName">
            <summary>
            The shortname of the callout that will be displayed on the notification's header (eg. Trespassing)
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.CaseID">
            <summary>
            DON'T EDIT! CaseID will be automatically generated
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.XP">
            <summary>
            The amount of XP that this call will add to the player's progression once completed<br/>
            (NOTE: Server owners can set a fix amount, which will override this XP)
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.ResponseCode">
            <summary>
            Response Code (eg. 1,2,3,...)
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.StartDistance">
            <summary>
            The distance that the distance checker will use to detemine whether the player is in range and start the callout 
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.Location">
            <summary>
            Location of the callout. This position will be marked on the map and set as a waypoint for the player
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.Marker">
            <summary>
            The blip will be created over the `Location`
            </summary>
        </member>
        <member name="F:CalloutAPI.Callout.Identifier">
            <summary>
            Do not set it! It'll be used as a unique identifier by CalloutManager when creating a call
            </summary>
        </member>
        <member name="P:CalloutAPI.Callout.Started">
            <summary>
            It'll be set to true once the callout starts ( the player gets in range ).<br/>
            It is mainly used by the callout manager to determine whether to reward a player or not
            </summary>
        </member>
        <member name="T:CalloutAPI.Callout.Probability">
            <summary>
            Probability (Low-Medium-High)
            </summary>
        </member>
        <member name="M:CalloutAPI.Callout.OnAccept(System.Single,CitizenFX.Core.BlipColor,CitizenFX.Core.BlipSprite,System.Int32)">
            <summary>
            OnAccept will be called when the player accepts the call.
            You must call base.OnAccept(args) to initialise the default properties
            </summary>
        </member>
        <member name="M:CalloutAPI.Callout.Init">
            <summary>
            Init() will be automatically invoked by the CalloutManager<br/>
            Define game logic here (eg. Spawn suspects,victims,vehicles)
            </summary>
        </member>
        <member name="M:CalloutAPI.Callout.OnStart(CitizenFX.Core.Ped)">
            <summary>
            (Do not call it)<br/><br/>
            Destructs every spawned object automatically if defined as a field or property (can be public, private, protected and static)<br/>
            To spawn something, defined it as a property or field, otherwise you'll manually have to delete it locally
            See the documentation
            </summary>
        </member>
        <member name="P:CalloutAPI.Callout.EndCallout">
            <summary>
            EndCallout() should be called when you want to terminate or end the callout.<br /><br />
            You should have conditions with your logic when you want to end your callout (Eg. when the player goes to a certain point on the map, ...)<br />
            Calling this method will automatically mark it as a completed callout<br />
            If you don't call this method, the user will have to manually cancel the callout.<br /><br />
            Called methods after calling EndCallout() method:<br />
            - OnCancelBefore()<br />
            - OnCancelAfter()
            </summary>
        </member>
        <member name="M:CalloutAPI.Callout.ReceiveTick">
            Receive Tick from the callout manager
        </member>
        <member name="T:CalloutAPI.CalloutPropertiesAttribute">
            <summary>
            Bundles callout properties (CalloutPropertiesAttribute is used in the CalloutManager)
            </summary>
        </member>
        <member name="P:CalloutAPI.CalloutPropertiesAttribute.name">
            <summary>The name of the callout(Not the in game dispatch display name)</summary>
        </member>
        <member name="P:CalloutAPI.CalloutPropertiesAttribute.probability">
            <summary>The probability of the callout which can be: Probability.Low - Probability.Medium - Probability.High</summary>
        </member>
        <member name="M:CalloutAPI.CalloutPropertiesAttribute.#ctor(System.String,System.String,System.String,CalloutAPI.Callout.Probability)">
            <summary>
            Callout properties
            </summary>
            <param name="name">The name of the callout (Not the in game dispatch display name)</param>
            <param name="probability">Set the probability of the callout (eg. Probability.Low)</param>
        </member>
    </members>
</doc>
